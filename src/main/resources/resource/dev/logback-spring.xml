<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!--
         说明：
         1、日志级别及文件
                 日志记录采用分级记录，级别与日志文件名相对应，不同级别的日志信息记录到不同的日志文件中
                 例如：error级别记录到log_error_xxx.log或log_error.log（该文件为当前记录的日志文件），而log_error_xxx.log为归档日志，
                 日志文件按日期记录，同一天内，若日志文件大小等于或大于2M，则按0、1、2...顺序分别命名
                 例如log-level-2013-12-21.0.log
                 其它级别的日志也是如此。
         2、文件路径
                 若开发、测试用，在Eclipse中运行项目，则到Eclipse的安装路径查找logs文件夹，以相对路径../logs。
                 若部署到Tomcat下，则在Tomcat下的logs文件中
         3、Appender
                 FILEERROR对应error级别，文件名以log-error-xxx.log形式命名
                 FILEWARN对应warn级别，文件名以log-warn-xxx.log形式命名
                 FILEINFO对应info级别，文件名以log-info-xxx.log形式命名
                 FILEDEBUG对应debug级别，文件名以log-debug-xxx.log形式命名
                 stdout将日志信息输出到控制上，为方便开发测试使用
    -->
    <springProperty name="logPath" scope="context" source="logging.path"/>
    <contextName>hcerp</contextName>
    <property name="LOG_PATH" value="${logPath}"/>

    <!--控制台日志-->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!--  encoder 默认配置为PatternLayoutEncoder -->
        <encoder>
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度,%line:行号,%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger Line:%-3L - %msg%n</pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
        <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
        </filter>
    </appender>


    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--定义日志输出的路径-->
        <!--这里的scheduler.manager.server.home 没有在上面的配置中设定，所以会使用java启动时配置的值-->
        <!--比如通过 java -Dscheduler.manager.server.home=/path/to XXXX 配置该属性-->
        <file>${LOG_PATH}/hcerp.log</file>
        <!--定义日志滚动的策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--定义文件滚动时的文件名的格式-->
            <fileNamePattern>${LOG_PATH}/hcerp-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--60天的时间周期-->
            <maxHistory>60</maxHistory>
        </rollingPolicy>
        <!-- 追加方式记录日志 -->
        <!--        <append>true</append>-->
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            &lt;!&ndash;每个日志文件最大100MB&ndash;&gt;
            <maxFileSize>10MB</maxFileSize>
        </triggeringPolicy>-->
        <!--定义输出格式-->
        <!-- 日志文件的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger Line:%-3L - %msg%n</pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
        <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
        </filter>
    </appender>


    <!--root是默认的logger 这里设定输出级别是debug-->
    <root level="debug">
        <!--定义了两个appender，日志会通过往这两个appender里面写-->
        <appender-ref ref="stdout"/>
        <appender-ref ref="file"/>
    </root>

    <!--由于设置了 additivity="false" ，所以输出时不会使用rootLogger的appender-->
    <!--但是这个logger本身又没有配置appender，所以使用这个logger输出日志的话就不会输出到任何地方-->
    <logger level="INFO" name="org.springframework"/>
    <!--    <logger level="DEBUG" name="org.mybatis"/>-->
    <!--    <logger level="DEBUG" name="tk.mybatis"/>-->
    <logger level="DEBUG" name="com.hc.ordersync"/>

</configuration>
